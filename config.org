* ELPA configuration
Add additional archives and do (package-initialize)
#+begin_src emacs-lisp :results silent
  (require 'package)
  (add-to-list 'package-archives
               '("marmalade" . "http://marmalade-repo.org/packages/"))
  (package-initialize)
#+end_src

Do (package-refresh-contents) if we have never done that yet.
#+begin_src emacs-lisp :results silent
  (dolist (archive package-archives)
    (let* ((dir (expand-file-name "archives" package-user-dir))
           (dir (expand-file-name (car archive) dir)))
      (unless (file-directory-p dir)
        (package-refresh-contents)
        (return))))
#+end_src

Provide a convinent function to install packages.
#+begin_src emacs-lisp :results silent
  (defun abaw/package-install (package)
    "install a package using `package-install' if it has not been installed yet."
    (unless (package-installed-p package)
      (package-install package)))
#+end_src

* el-get configuration
This code is modified from
emacs-kicker(https://github.com/dimitri/emacs-kicker). It can install
el-get automatically synchronously if we don't have installed it yet.

#+begin_src emacs-lisp :results silent
  (setq el-get-dir (file-name-as-directory (locate-user-emacs-file "el-get")))
  (add-to-list 'load-path (abaw/join-path el-get-dir "el-get"))
  
  (unless (require 'el-get nil t)
    (with-current-buffer (url-retrieve-synchronously "https://github.com/dimitri/el-get/raw/master/el-get-install.el")
      (end-of-buffer)
      (eval-print-last-sexp)))
  
#+end_src

** Addtional local recipes
*** I want to get yasnippet from its new github repo:
#+begin_src emacs-lisp :results silent
  (add-to-list 'el-get-sources
               (let ((orig-def (el-get-package-def "yasnippet")))
                 (plist-put
                  (plist-put
                   orig-def
                   :type 'git)
                  :url "https://github.com/capitaomorte/yasnippet.git")))
#+end_src
*** color-moccur
#+begin_src emacs-lisp :results silent
    (add-to-list 'el-get-sources
                 '(:name color-moccur :type emacswiki :website "http://www.emacswiki.org/emacs/color-moccur.el" :features "color-moccur"))
#+end_src

* Basic Configuration
** a minor mode for my global key bindings
According to scottfrazer's brilliant idea, we can use a minor mode for
defining global key bindings to prevent our key bindings overriden by
other major modes. See
http://stackoverflow.com/questions/683425/globally-override-key-binding-in-emac.

#+begin_src emacs-lisp :results silent
  (defvar my-global-keys-mode-map (make-sparse-keymap))
  (define-minor-mode my-global-keys-mode
    "A minor mode used to define my global key bindings"
    :global t
    :keymap 'my-global-keys-mode-map)
  (my-global-keys-mode 1)

  (defun abaw/global-set-key (key command)
    "The same as `global-set-key' except the key bindings
    configured by this will not be overriden by other major
    modes."
    (interactive "KSet key globally: \nCSet key %s to command: ")
    (or (vectorp key) (stringp key)
        (signal 'wrong-type-argument (list 'arrayp key)))
    (define-key my-global-keys-mode-map key command))

#+end_src


** dired
Let dired do some recursive operations
#+begin_src emacs-lisp :results silent
(setq dired-recursive-copies 'top)
(setq dired-recursive-deletes 'top)
#+end_src
** show column numbers
#+begin_src emacs-lisp :results silent
(column-number-mode 1)
#+end_src

** enlarge the kill ring
#+begin_src emacs-lisp :results silent
(setq kill-ring-max 200)
#+end_src

** yes/no => y/n
#+begin_src emacs-lisp :results silent
(fset 'yes-or-no-p 'y-or-n-p)
#+end_src

** utf-8 environment
But I don't know if this is good enough?? Do I need to set-keyboard-coding-system??
#+begin_src emacs-lisp :results silent
(set-language-environment 'utf-8)
#+end_src

** show trailing white spaces
#+begin_src emacs-lisp :results silent
(setq-default show-trailing-whitespace t)
#+end_src

** highlight matching parens
#+begin_src emacs-lisp :results silent
(show-paren-mode t)
#+end_src

** rectangle selection using cua-mode
   This also remaps a lot of key bindings of commands. Here are some
   examples:
     - set-mark-command -> cua-set-mark
     - yank, clipboard-yank, x-clipboard-yank -> cua-yank
     - exchange-point-and-mark -> cua-exchange-point-and-mark
       exchange point and mark without activating the region.
#+begin_src emacs-lisp :results silent
(cua-mode t)
(setq cua-enable-cua-keys nil)
#+end_src

** ibuffer
#+begin_src emacs-lisp :results silent
  (require 'ibuffer)
      (abaw/global-set-key (kbd "C-x C-b") 'ibuffer)
      (setq ibuffer-saved-filter-groups
            (quote (("default"
                     ("Org"
                      (mode . org-mode))
                     ("Version Control Systems"
                      (mode . magit-mode))
                     ("Programming"
                      (or
                       (mode . c-mode)
                       (mode . c++-mode)
                       (mode . perl-mode)
                       (mode . python-mode)
                       (mode . lisp-mode)
                       (mode . emacs-lisp-mode)
                       (mode . haskell-mode)
                       ))))))
      (add-hook 'ibuffer-mode-hook
                (lambda ()
                  (ibuffer-switch-to-saved-filter-groups "default")))
  
  
  
#+end_src

** I want more spaces
#+begin_src emacs-lisp :results silent
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (fringe-mode 0)
#+end_src

** Here configures some global key bindings
#+begin_src emacs-lisp :results silent
  (abaw/global-set-key (kbd "C-c r") 'font-lock-fontify-buffer)
  (abaw/global-set-key (kbd "C-2") 'set-mark-command)
  (abaw/global-set-key (kbd "C-c g") 'goto-line)
  (abaw/global-set-key (kbd "M-/") 'hippie-expand)
#+end_src

** ido
#+begin_src emacs-lisp :results silent
  (require 'ido)
  (ido-mode t)
  (setq read-file-name-function 'ido-read-file-name)
  (setq ido-enable-flex-matching t)
  
  ;; (setq ido-default-buffer-method 'selected-window)
  ;; (setq ido-default-file-method 'selected-window)
#+end_src

** turn paredit and hl-sexp for lisp related modes
#+begin_src emacs-lisp :results silent
  (abaw/package-install 'paredit)
  (abaw/package-install 'hl-sexp)
  
  (defun abaw/lisp-hook ()
    (eldoc-mode 1)
    (hl-sexp-mode 1)
    (paredit-mode 1))
  
  (mapc (lambda (mode-hook)
          (add-hook mode-hook 'abaw/lisp-hook))
        '(lisp-mode-hook emacs-lisp-mode-hook ielm-mode-hook))
  
  (add-hook 'minibuffer-setup-hook (lambda ()
                                     (when (eq this-command 'eval-expression)
                                         (paredit-mode 1))))
#+end_src

** zenburn color theme
#+begin_src emacs-lisp :results silent
(abaw/package-install 'zenburn-theme)
(load-theme 'zenburn t)
#+end_src


** color-moccur
#+begin_src emacs-lisp :results silent
  (el-get 'wait "color-moccur")
#+end_src


** yasnippet
Some of my snippets need time-stamp package
#+begin_src emacs-lisp :results silent
  (require 'time-stamp)
#+end_src

Enable yasnippet
#+begin_src emacs-lisp :results silent
  (el-get 'wait "yasnippet")
  (yas/global-mode t)
  (setq yas/snippet-dirs (abaw/join-path abaw/top-dir "snippets"))
  (yas/load-directory yas/snippet-dirs)
  
  ;; if we use setq, the default "TAB" key will not be unbind.
  (custom-set-variables '(yas/trigger-key "<C-tab>"))
#+end_src

* Configuraton for org mode
Here some org-mode helper functions/commands
#+begin_src emacs-lisp :results silent
  (defun abaw/org-src-split ()
    "Split an org source block into two blocks at point. If a
  region has been marked, it splits a org source block into three
  blocks."
    (interactive)
    (let ((head (org-babel-where-is-src-block-head))
          headline)
      (unless head
        (error "Point is not inside a source block"))
  
      (setq headline (save-excursion
                       (goto-char head)
                       (end-of-line)
                       (buffer-substring-no-properties head (point))))
  
      (flet ((split-at-pos (pos)
                           (goto-char pos)
                           (beginning-of-line)
                           (insert (format "#+end_src\n%s\n" headline))))
  
        (if (region-active-p)
            (progn
              (split-at-pos (save-excursion
                              (goto-char (region-end))
                              (if (bolp)
                                  (point)
                                (1+ (line-end-position)))))
              (split-at-pos (region-beginning)))
            (split-at-pos (point))))))
  
#+end_src

* Configurations for version control systems

** magit
#+begin_src emacs-lisp :results silent
(el-get 'wait "magit")
#+end_src


* Save customization to other place
#+begin_src emacs-lisp :results silent
  (setq custom-file (expand-file-name "custom.el" abaw/top-dir))
  (when (file-exists-p custom-file)
    (load-file custom-file))
#+end_src
