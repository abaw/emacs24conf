#+begin_src emacs-lisp
  (defun abaw/join-path (&rest components)
    "Join path components into a path and return it. For
    example, (abaw/join-path \"a\" \"b\" \"c\") returns \"a/b/c\"
    in unix."
    (when components
      (if (cdr components)
          (concat (file-name-as-directory (car components))
                  (apply 'abaw/join-path (cdr components)))
        (car components))))
#+end_src

* ELPA configuration
#+begin_src emacs-lisp
(require 'package)
(add-to-list 'package-archives
	     '("marmalade" . "http://marmalade-repo.org/packages/"))
(package-initialize)

(defun abaw/package-install (package)
  "install a package using `package-install' if it has not been installed yet."
  (unless (package-installed-p package)
    (package-install package)))
#+end_src

* el-get configuration
This code is modified from
emacs-kicker(https://github.com/dimitri/emacs-kicker). It can install
el-get automatically if we don't have installed it yet.

#+begin_src emacs-lisp
  (add-to-list 'load-path (abaw/join-path user-emacs-directory "el-get" "el-get"))
  
  (unless (require 'el-get nil t)
    (url-retrieve
     "https://github.com/dimitri/el-get/raw/master/el-get-install.el"
     (lambda (s)
       (end-of-buffer)
       (eval-print-last-sexp))))
#+end_src

** Addtional local recipes
I want to get yasnippet from its new github repo:
#+begin_src emacs-lisp
  (add-to-list 'el-get-sources
               (let ((orig-def (el-get-package-def "yasnippet")))
                 (plist-put
                  (plist-put
                   orig-def
                   :type 'git)
                  :url "https://github.com/capitaomorte/yasnippet.git")))
#+end_src

** Install packages
#+begin_src emacs-lisp
  (el-get 'wait "magit" "yasnippet")
  
#+end_src


* Basic Configuration
I need cl package for easier programming envinronment.
#+begin_src emacs-lisp
  (require 'cl)
#+end_src

** enlarge the kill ring
#+begin_src emacs-lisp
(setq kill-ring-max 200)
#+end_src

** yes/no => y/n
#+begin_src emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+end_src

** utf-8 environment
But I don't know if this is good enough?? Do I need to set-keyboard-coding-system??
#+begin_src emacs-lisp
(set-language-environment 'utf-8)
#+end_src

** show trailing white spaces
#+begin_src emacs-lisp
(setq-default show-trailing-whitespace t)
#+end_src

#+results:
: t

** highlight matching parens
#+begin_src emacs-lisp
(show-paren-mode t)
#+end_src

#+results:
: t


** I want more spaces
#+begin_src emacs-lisp
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (menu-bar-mode -99) ;; tool bar be accessed through C-mouse-3
  (fringe-mode 0)
#+end_src

#+results:

** Here configures some global key bindings
#+begin_src emacs-lisp
(global-set-key (kbd "C-c r") 'font-lock-fontify-buffer)
(global-set-key (kbd "C-2") 'set-mark-command)
(global-set-key (kbd "C-c g") 'goto-line)
(global-set-key (kbd "M-/") 'hippie-expand)
#+end_src

** ido
#+begin_src emacs-lisp
  (require 'ido)
  (ido-mode t)
  (setq read-file-name-function 'ido-read-file-name)
  (setq ido-enable-flex-matching t)
  
  ;; (setq ido-default-buffer-method 'selected-window)
  ;; (setq ido-default-file-method 'selected-window)
#+end_src

** Turn on paredit and hl-sexp for lisp related modes
#+begin_src emacs-lisp
  (abaw/package-install 'paredit)
  (abaw/package-install 'hl-sexp)
  
  (defun abaw/lisp-hook ()
    (eldoc-mode t)
    (hl-sexp-mode t)
    (paredit-mode t))
  
  (mapc (lambda (mode-hook)
          (add-hook mode-hook 'abaw/lisp-hook))
        '(lisp-mode-hook emacs-lisp-mode-hook ielm-mode-hook))
#+end_src

** yasnippet
Some of my snippets need time-stamp package
#+begin_src emacs-lisp
  (require 'time-stamp)
#+end_src

Enable yasnippet
#+begin_src emacs-lisp
  (yas/global-mode t)
  (let ((snippet-dir (abaw/join-path abaw/top-dir "snippets")))
    (when (file-directory-p snippet-dir)
      (yas/load-directory snippet-dir)))
  ;; if we use setq, the default "TAB" key will not be unbind.
  (custom-set-variables '(yas/trigger-key "<C-tab>"))
#+end_src

#+results:

* Configuraton for org mode
Here some org-mode helper functions/commands
#+begin_src emacs-lisp
  (defun abaw/org-src-split ()
    "Split an org source block into two blocks at point. If a
  region has been marked, it splits a org source block into three
  blocks."
    (interactive)
    (let ((head (org-babel-where-is-src-block-head))
          headline)
      (unless head
        (error "Point is not inside a source block"))
  
      (setq headline (save-excursion
                       (goto-char head)
                       (end-of-line)
                       (buffer-substring-no-properties head (point))))
  
      (flet ((split-at-pos (pos)
                           (goto-char pos)
                           (beginning-of-line)
                           (insert (format "#+end_src\n%s\n" headline))))
  
        (if (region-active-p)
            (progn
              (split-at-pos (save-excursion
                              (goto-char (region-end))
                              (if (bolp)
                                  (point)
                                (1+ (line-end-position)))))
              (split-at-pos (region-beginning)))
            (split-at-pos (point))))))
  
#+end_src

#+results:
: abaw/org-src-split

* Configurations for version control systems

** magit

* Save customization to other place
#+begin_src emacs-lisp
  (setq custom-file (expand-file-name "custom.el" abaw/top-dir))
  (when (file-exists-p custom-file)
    (load-file custom-file))
#+end_src
