* ELPA configuration
Add additional archives and do (package-initialize)
#+begin_src emacs-lisp :results silent
  (require 'package)
  (add-to-list 'package-archives
               '("marmalade" . "http://marmalade-repo.org/packages/") t)
  (add-to-list 'package-archives
               '("melpa" . "http://melpa.milkbox.net/packages/") t)
  (package-initialize)
#+end_src

* el-get configuration
This code is modified from
emacs-kicker(https://github.com/dimitri/emacs-kicker). It can install
el-get automatically synchronously if we don't have installed it yet.

#+begin_src emacs-lisp :results silent
  (setq el-get-git-install-url "https://github.com/dimitri/el-get.git")
  (setq el-get-github-default-url-type "https")
  (setq el-get-dir (file-name-as-directory (locate-user-emacs-file "el-get")))
  (add-to-list 'load-path (abaw/join-path el-get-dir "el-get"))

  (unless (require 'el-get nil t)
    (with-current-buffer (url-retrieve-synchronously "https://github.com/dimitri/el-get/raw/master/el-get-install.el")
      (let (el-get-master-branch)
        (end-of-buffer)
        (eval-print-last-sexp))))
#+end_src

** Addtional local recipes
*** color-moccur and moccur-edit
#+begin_src emacs-lisp :results silent
  (add-to-list 'el-get-sources
               '(:name color-moccur
                       :type emacswiki
                       :website "http://www.emacswiki.org/emacs/color-moccur.el"
                       :features "color-moccur"))
  (add-to-list 'el-get-sources
               '(:name moccur-edit
                       :type emacswiki
                       :website "http://www.emacswiki.org/emacs/moccur-edit.el"
                       :features "moccur-edit"
                       :depends color-moccur))
#+end_src
*** python-mode
#+begin_src emacs-lisp :results silent
  (add-to-list 'el-get-sources
               '(:name python-mode
                       :type github
                       :pkgname "abaw/python-mode"
                       :description "Major mode for editing Python programs"
                       :features (python-mode doctest-mode)
                       :compile nil
                       :load "test/doctest-mode.el"
                       :prepare (progn
                                  (autoload 'python-mode "python-mode"
                                    "Python editing mode." t)
                                  (add-to-list 'auto-mode-alist
                                               '("\\.py$" . python-mode))
                                  (add-to-list 'interpreter-mode-alist
                                               '("python" . python-mode)))))
#+end_src
*** restclient.el
#+begin_src emacs-lisp :results silent
  (add-to-list 'el-get-sources
               '(:name restclient.el
                       :type github
                       :pkgname "pashky/restclient.el"
                       :description "This is a tool to manually explore and test HTTP REST webservices."
                       :features (restclient)))
#+end_src


* Basic Configuration
** enabled advanced features
#+begin_src emacs-lisp :results silent
(put 'narrow-to-region 'disabled nil)
#+end_src

** a command to ad-hoc define command to run when a file is save
#+begin_src emacs-lisp :results silent
  (defun abaw/add-after-save-hook (exp)
    "Register a sexp to run after saving current buffer. It will
  try to run the expression before adding it to the
  `after-save-hook'"
    (interactive (list (read-from-minibuffer "Eval: "
                                             nil
                                             read-expression-map t
                                             'read-expression-history)))
    (eval exp)
    (add-to-list 'after-save-hook (eval `(lambda () "ad-hoc defined function in `abaw/add-after-save-hook'" ,exp))))

#+end_src

** a command to ssh to remote machine
#+begin_src emacs-lisp :results silent
  (defun abaw/ssh (remote &optional user)
    "Run an inferior shell on a remote host through TRAMP(i.e. ssh)."
    (interactive (list (read-from-minibuffer "Remote Host: ")
                       (and current-prefix-arg
                           (read-from-minibuffer "User: "))))
    (when (equal (string-strip remote) "")
      (error "We need a valid host name to start"))

    (when (and user (equal (string-strip user) ""))
      (setq user nil))

    (let ((default-directory (format "/sshx:%s%s:/"
                                     (if user
                                         (format "%s@" user)
                                       "") remote))
          (buffer-name (read-from-minibuffer "Buffer Name: " (format "*%s*" remote))))
      (shell buffer-name)))

#+end_src

** a minor mode for my global key bindings
According to scottfrazer's brilliant idea, we can use a minor mode for
defining global key bindings to prevent our key bindings overriden by
other major modes. See
http://stackoverflow.com/questions/683425/globally-override-key-binding-in-emac.

#+begin_src emacs-lisp :results silent
  (defvar my-global-keys-mode-map (make-sparse-keymap))
  (define-minor-mode my-global-keys-mode
    "A minor mode used to define my global key bindings"
    :global t
    :keymap 'my-global-keys-mode-map)

  (defvar my-global-keys--keymap-alist '(my-global-keys-mode my-global-keys-mode-map))
  (push 'my-global-keys--keymap-alist emulation-mode-map-alists)
  (my-global-keys-mode 1)

  (defun abaw/global-set-key (key command)
    "The same as `global-set-key' except the key bindings
    configured by this will not be overriden by other major
    modes."
    (interactive "KSet key globally: \nCSet key %s to command: ")
    (or (vectorp key) (stringp key)
        (signal 'wrong-type-argument (list 'arrayp key)))
    (define-key my-global-keys-mode-map key command))
#+end_src

** recentf-mode
#+begin_src emacs-lisp :results silent
(recentf-mode)
#+end_src

** dired
Let dired do some recursive operations
#+begin_src emacs-lisp :results silent
(setq dired-recursive-copies 'top)
(setq dired-recursive-deletes 'top)
#+end_src
use dired+
#+begin_src emacs-lisp :results silent
(el-get 'sync "dired+")
#+end_src

** show column numbers
#+begin_src emacs-lisp :results silent
(column-number-mode 1)
#+end_src

** enlarge the kill ring
#+begin_src emacs-lisp :results silent
(setq kill-ring-max 200)
#+end_src

** yes/no => y/n
#+begin_src emacs-lisp :results silent
(fset 'yes-or-no-p 'y-or-n-p)
#+end_src

** better scrolling
#+begin_src emacs-lisp :results silent
(setq scroll-margin 3 scroll-conservatively 100)
#+end_src

** set default fill-column
#+begin_src emacs-lisp :results silent
(set-default 'fill-column 80)
#+end_src

** utf-8 environment
But I don't know if this is good enough?? Do I need to set-keyboard-coding-system??
#+begin_src emacs-lisp :results silent
(set-language-environment 'utf-8)
#+end_src

** show trailing white spaces by default and disable it in some modes
#+begin_src emacs-lisp :results silent
  (setq-default show-trailing-whitespace t)
  (add-hook 'comint-mode-hook
            (lambda () (setq show-trailing-whitespace nil)))
#+end_src

** highlight matching parens
#+begin_src emacs-lisp :results silent
(show-paren-mode t)
#+end_src

** rectangle selection using cua-mode
   This also remaps a lot of key bindings of commands. Here are some
   examples:
     - set-mark-command -> cua-set-mark
     - yank, clipboard-yank, x-clipboard-yank -> cua-yank
     - exchange-point-and-mark -> cua-exchange-point-and-mark
       exchange point and mark without activating the region.
#+begin_src emacs-lisp :results silent
(cua-mode t)
(setq cua-enable-cua-keys nil)
#+end_src

** ibuffer
#+begin_src emacs-lisp :results silent
  (require 'ibuffer)
      (abaw/global-set-key (kbd "C-x C-b") 'ibuffer)
      (setq ibuffer-saved-filter-groups
            (quote (("default"
                     ("Org"
                      (mode . org-mode))
                     ("Version Control Systems"
                      (mode . magit-mode))
                     ("Programming"
                      (or
                       (mode . c-mode)
                       (mode . c++-mode)
                       (mode . perl-mode)
                       (mode . python-mode)
                       (mode . lisp-mode)
                       (mode . emacs-lisp-mode)
                       (mode . haskell-mode)
                       ))))))
      (add-hook 'ibuffer-mode-hook
                (lambda ()
                  (ibuffer-switch-to-saved-filter-groups "default")))



#+end_src

** I want more spaces
#+begin_src emacs-lisp :results silent
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (fringe-mode 0)
#+end_src

** Here configures some global key bindings
#+begin_src emacs-lisp :results silent
  (abaw/global-set-key (kbd "C-c r") 'font-lock-fontify-buffer)
  (abaw/global-set-key (kbd "C-2") 'set-mark-command)
  (abaw/global-set-key (kbd "C-c g") 'goto-line)
  (abaw/global-set-key (kbd "M-/") 'hippie-expand)
#+end_src

** ido
#+begin_src emacs-lisp :results silent
  (require 'ido)
  (ido-mode t)
  (ido-everywhere)
  (setq read-file-name-function 'ido-read-file-name)
  (setq ido-enable-flex-matching t)
  (setq ido-max-directory-size 100000)

  ;; (setq ido-default-buffer-method 'selected-window)
  ;; (setq ido-default-file-method 'selected-window)
#+end_src

** zenburn color theme
#+begin_src emacs-lisp :results silent
  (el-get 'sync "color-theme-zenburn")
  (message "custom-theme-load-path=%s" custom-theme-load-path)
  (load-theme 'zenburn t)
#+end_src

** color-moccur
#+begin_src emacs-lisp :results silent
  (el-get 'sync "moccur-edit")
  (require 'moccur-edit)
#+end_src

** yasnippet
Some of my snippets need time-stamp package
#+begin_src emacs-lisp :results silent
  (require 'time-stamp)
#+end_src

Enable yasnippet
#+begin_src emacs-lisp :results silent
  (el-get 'sync "yasnippet")
  (yas-global-mode t)
  (setq yas-snippet-dirs (cons (abaw/join-path abaw/top-dir "snippets") yas-snippet-dirs))
  (yas-reload-all)

  (define-key yas-minor-mode-map (kbd "<C-tab>") 'yas-expand)
#+end_src

** C-./C-, fast jump to temporarily saved place
These code are modified from someone's .emcas.el.
#+begin_src emacs-lisp :results silent
  (defun ska-point-to-register()
    "Store cursorposition _fast_ in a register.
  Use ska-jump-to-register to jump back to the stored position."
    (interactive)
    (point-to-register 8))

  (defun ska-jump-to-register()
    "Switches between current cursorposition and position
  that was stored with ska-point-to-register."
    (interactive)
    (let ((tmp (point-marker)))
      (jump-to-register 8)
      (set-register 8 tmp)))

  (abaw/global-set-key (kbd "C-.") 'ska-point-to-register)
  (abaw/global-set-key (kbd "C-,") 'ska-jump-to-register)

#+end_src

** wrap long time
#+begin_src emacs-lisp :results silent
(set-default 'truncate-lines nil)
(setq truncate-partial-width-windows nil)
#+end_src

** limit maximum size for comint-mode(e.g. shell-mode)
#+begin_src emacs-lisp :results silent
(add-to-list 'comint-output-filter-functions 'comint-truncate-buffer t)
(setq comint-buffer-maximum-size 20000)
#+end_src

** auto-complete
#+begin_src emacs-lisp :results silent
  (el-get 'sync "auto-complete")
  (abaw/global-set-key (kbd "C-`") 'auto-complete)
  (require 'auto-complete-config)
  (global-auto-complete-mode 1)
  (setq ac-auto-start nil)
#+end_src

** store backup file in user-emacs-directory
#+begin_src emacs-lisp :results silent
  (setq backup-directory-alist `(("." . ,(abaw/join-path user-emacs-directory "backup"))))

#+end_src

** winner mode
#+begin_src emacs-lisp :results silent
(winner-mode 1)
#+end_src

** smex mode
#+begin_src emacs-lisp :results silent
  (el-get 'sync "smex")
  (abaw/global-set-key (kbd "M-x") 'smex)
  (abaw/global-set-key (kbd "C-c M-x") 'execute-extended-command)
#+end_src
** helm
#+begin_src emacs-lisp :results silent
  (el-get 'sync "helm")
  (require 'helm-config)
  (abaw/global-set-key (kbd "<f5>") 'helm-for-files)
  (setq helm-for-files-preferred-list '(helm-c-source-files-in-current-dir
                                        helm-c-source-buffers-list
                                        helm-c-source-recentf))
#+end_src

** switch window using arrow keys
#+begin_src emacs-lisp :results silent
  (require 'windmove)

  (defun abaw/windmove ()
    "Select window using arrow keys."
    (interactive)
    (loop for ev = (let ((v (this-command-keys-vector)))
                     (vector (elt v (1- (length v)))))
          then (read-key-sequence-vector "Select window using arrow keys:")
          with arrow-evs = (mapcar 'vector '(up down left right))
          do (message "ev:%s" ev)
          if (member ev arrow-evs)
          do (ignore-errors (windmove-do-window-select (elt ev 0)))
          else return (setq unread-command-events
                        (append (listify-key-sequence ev) unread-command-events))))

  (dolist (arrow '(up down left right))
    (abaw/global-set-key (read-kbd-macro (format "C-x <%s>" arrow)) 'abaw/windmove))

#+end_src

** insert/replace a file name at point
#+begin_src emacs-lisp :results silent
  (defun abaw/insert-or-replace-filename-at-point ()
    "The command will insert or replace filename at current point
  using read-file-name interface"
    (interactive)
    (let ((filename-region (bounds-of-thing-at-point 'filename))
          (filename (read-file-name "File name to insert:")))
      (when (and filename (not (equal filename "")))
        (when filename-region
          (delete-region (car filename-region) (cdr filename-region)))
        (insert filename))))
#+end_src

** multiple cursors
#+begin_src emacs-lisp :results silent
  (el-get 'sync "multiple-cursors")
  (abaw/global-set-key (kbd "C->") 'mc/mark-next-like-this)
  (abaw/global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
  (abaw/global-set-key (kbd "C-c C->") 'mc/mark-all-like-this)
#+end_src

** dired with less information
#+begin_src emacs-lisp :results silent
  ;; Got this from "What the emacs.d!?" site
  (el-get 'sync "dired-details")
  (setq-default dired-details-hidden-string "--- ")
  (dired-details-install)
#+end_src

** keyboard translation for terminals
#+begin_src emacs-lisp :results silent
  (defun abaw/config-terminal-input-decode-map (frame)
    (unless (display-graphic-p frame)
      (macrolet ((translate (from to)
                          `(define-key input-decode-map (kbd ,from) (kbd ,to))))

        (with-selected-frame frame
          (translate "ESC M-O A" "M-<up>")
          (translate "ESC M-O B" "M-<down>")
          (translate "ESC M-O D" "M-<left>")
          (translate "ESC M-O C" "M-<right>")
          (translate "M-[ 5 D" "C-<left>")
          (translate "M-[ 5 C" "C-<right>")))))

  (add-hook 'after-make-frame-functions 'abaw/config-terminal-input-decode-map)

#+end_src

** markdown mode
#+begin_src emacs-lisp :results silent
  (el-get 'sync "markdown-mode")
#+end_src


* Configuraton for org mode
** org mode helper functions/commands
#+begin_src emacs-lisp :results silent
  (defun abaw/org-src-split ()
    "Split an org source block into two blocks at point. If a
  region has been marked, it splits a org source block into three
  blocks."
    (interactive)
    (let ((head (org-babel-where-is-src-block-head))
          headline)
      (unless head
        (error "Point is not inside a source block"))

      (setq headline (save-excursion
                       (goto-char head)
                       (end-of-line)
                       (buffer-substring-no-properties head (point))))

      (flet ((split-at-pos (pos)
                           (goto-char pos)
                           (beginning-of-line)
                           (insert (format "#+end_src\n%s\n" headline))))

        (if (region-active-p)
            (progn
              (split-at-pos (save-excursion
                              (goto-char (region-end))
                              (if (bolp)
                                  (point)
                                (1+ (line-end-position)))))
              (split-at-pos (region-beginning)))
            (split-at-pos (point))))))

#+end_src

** Some basic configurations
Key bindings for org mode:
#+begin_src emacs-lisp :results silent
  (abaw/global-set-key (kbd "<f12>") 'org-agenda)
  (abaw/global-set-key (kbd "C-c c") 'org-capture)
#+end_src
spell checking in the org buffers
#+begin_src emacs-lisp :results silent
  (add-hook 'org-mode-hook
	    #'(lambda ()
		(flyspell-mode t)))
#+end_src
highligh current line in agenda buffers:
#+begin_src emacs-lisp :results silent
  (add-hook 'org-agenda-mode-hook (lambda () (hl-line-mode)))
#+end_src
highlights in sparse tree persists after buffer being modified
#+begin_src emacs-lisp :results silent
(setq org-remove-highlights-with-change nil)
#+end_src

complete with ido
#+begin_src emacs-lisp :results silent
(setq org-completion-use-ido t)
#+end_src

disable editing invisible text such as a folded heading
#+begin_src emacs-lisp :results silent
(setq org-catch-invisible-edits 'error)
#+end_src

no blank lines between folded items
#+begin_src emacs-lisp :results silent
  (setq org-cycle-separator-lines 0)
#+end_src

#+begin_src emacs-lisp :results silent
(setq org-agenda-dim-blocked-tasks nil)
#+end_src

#+begin_src emacs-lisp :results silent
(setq org-agenda-compact-blocks t)
#+end_src

** code from [[http://doc.norang.ca/org-mode.html][Org Mode - Organize Your Life In Plain Text!]]
#+begin_src emacs-lisp :results silent
  (if (not (fboundp 'org-is-habit-p))
      (defun org-is-habit-p () "a fake `org-is-habit-p' function because I do not want to use the habit feature." nil))

  (defun bh/find-project-task ()
    "Move point to the parent (project) task if any"
    (save-restriction
      (widen)
      (let ((parent-task (save-excursion (org-back-to-heading 'invisible-ok) (point))))
        (while (org-up-heading-safe)
          (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
            (setq parent-task (point))))
        (goto-char parent-task)
        parent-task)))

  (defun bh/is-project-p ()
    "Any task with a todo keyword subtask"
    (save-restriction
      (widen)
      (let ((has-subtask)
            (subtree-end (save-excursion (org-end-of-subtree t)))
            (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
        (save-excursion
          (forward-line 1)
          (while (and (not has-subtask)
                      (< (point) subtree-end)
                      (re-search-forward "^\*+ " subtree-end t))
            (when (member (org-get-todo-state) org-todo-keywords-1)
              (setq has-subtask t))))
        (and is-a-task has-subtask))))

  (defun bh/is-project-subtree-p ()
    "Any task with a todo keyword that is in a project subtree.
    Callers of this function already widen the buffer view."
    (let ((task (save-excursion (org-back-to-heading 'invisible-ok)
                                (point))))
      (save-excursion
        (bh/find-project-task)
        (if (equal (point) task)
            nil
          t))))

  (defun bh/is-task-p ()
    "Any task with a todo keyword and no subtask"
    (save-restriction
      (widen)
      (let ((has-subtask)
            (subtree-end (save-excursion (org-end-of-subtree t)))
            (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
        (save-excursion
          (forward-line 1)
          (while (and (not has-subtask)
                      (< (point) subtree-end)
                      (re-search-forward "^\*+ " subtree-end t))
            (when (member (org-get-todo-state) org-todo-keywords-1)
              (setq has-subtask t))))
        (and is-a-task (not has-subtask)))))

  (defun bh/is-subproject-p ()
    "Any task which is a subtask of another project"
    (let ((is-subproject)
          (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
      (save-excursion
        (while (and (not is-subproject) (org-up-heading-safe))
          (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
            (setq is-subproject t))))
      (and is-a-task is-subproject)))

  (defun bh/list-sublevels-for-projects-indented ()
    "Set org-tags-match-list-sublevels so when restricted to a subtree we list all subtasks.
      This is normally used by skipping functions where this variable is already local to the agenda."
    (if (marker-buffer org-agenda-restrict-begin)
        (setq org-tags-match-list-sublevels 'indented)
      (setq org-tags-match-list-sublevels nil))
    nil)

  (defun bh/list-sublevels-for-projects ()
    "Set org-tags-match-list-sublevels so when restricted to a subtree we list all subtasks.
      This is normally used by skipping functions where this variable is already local to the agenda."
    (if (marker-buffer org-agenda-restrict-begin)
        (setq org-tags-match-list-sublevels t)
      (setq org-tags-match-list-sublevels nil))
    nil)

  (defvar bh/hide-scheduled-and-waiting-next-tasks t)

  (defun bh/toggle-next-task-display ()
    (interactive)
    (setq bh/hide-scheduled-and-waiting-next-tasks (not bh/hide-scheduled-and-waiting-next-tasks))
    (when  (equal major-mode 'org-agenda-mode)
      (org-agenda-redo))
    (message "%s WAITING and SCHEDULED NEXT Tasks" (if bh/hide-scheduled-and-waiting-next-tasks "Hide" "Show")))

  (defun bh/skip-stuck-projects ()
    "Skip trees that are not stuck projects"
    (save-restriction
      (widen)
      (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
        (if (bh/is-project-p)
            (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
                   (has-next))
              (save-excursion
                (forward-line 1)
                (while (and (not has-next) (< (point) subtree-end) (re-search-forward "^\\*+ NEXT " subtree-end t))
                  (unless (member "WAITING" (org-get-tags-at))
                    (setq has-next t))))
              (if has-next
                  nil
                next-headline)) ; a stuck project, has subtasks but no next task
          nil))))

  (defun bh/skip-non-stuck-projects ()
    "Skip trees that are not stuck projects"
    (bh/list-sublevels-for-projects-indented)
    (save-restriction
      (widen)
      (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
        (if (bh/is-project-p)
            (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
                   (has-next))
              (save-excursion
                (forward-line 1)
                (while (and (not has-next) (< (point) subtree-end) (re-search-forward "^\\*+ NEXT " subtree-end t))
                  (unless (member "WAITING" (org-get-tags-at))
                    (setq has-next t))))
              (if has-next
                  next-headline
                nil)) ; a stuck project, has subtasks but no next task
          next-headline))))

  (defun bh/skip-non-projects ()
    "Skip trees that are not projects"
    (bh/list-sublevels-for-projects-indented)
    (if (save-excursion (bh/skip-non-stuck-projects))
        (save-restriction
          (widen)
          (let ((subtree-end (save-excursion (org-end-of-subtree t))))
            (cond
             ((and (bh/is-project-p)
                   (marker-buffer org-agenda-restrict-begin))
              nil)
             ((and (bh/is-project-p)
                   (not (marker-buffer org-agenda-restrict-begin))
                   (not (bh/is-project-subtree-p)))
              nil)
             (t
              subtree-end))))
      (save-excursion (org-end-of-subtree t))))

  (defun bh/skip-project-trees-and-habits ()
    "Skip trees that are projects"
    (save-restriction
      (widen)
      (let ((subtree-end (save-excursion (org-end-of-subtree t))))
        (cond
         ((bh/is-project-p)
          subtree-end)
         ((org-is-habit-p)
          subtree-end)
         (t
          nil)))))

  (defun bh/skip-projects-and-habits-and-single-tasks ()
    "Skip trees that are projects, tasks that are habits, single non-project tasks"
    (save-restriction
      (widen)
      (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
        (cond
         ((org-is-habit-p)
          next-headline)
         ((and bh/hide-scheduled-and-waiting-next-tasks
               (member "WAITING" (org-get-tags-at)))
          next-headline)
         ((bh/is-project-p)
          next-headline)
         ((and (bh/is-task-p) (not (bh/is-project-subtree-p)))
          next-headline)
         (t
          nil)))))

  (defun bh/skip-project-tasks-maybe ()
    "Show tasks related to the current restriction.
    When restricted to a project, skip project and sub project tasks, habits, NEXT tasks, and loose tasks.
    When not restricted, skip project and sub-project tasks, habits, and project related tasks."
    (save-restriction
      (widen)
      (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
             (next-headline (save-excursion (or (outline-next-heading) (point-max))))
             (limit-to-project (marker-buffer org-agenda-restrict-begin)))
        (cond
         ((bh/is-project-p)
          next-headline)
         ((org-is-habit-p)
          subtree-end)
         ((and (not limit-to-project)
               (bh/is-project-subtree-p))
          subtree-end)
         ((and limit-to-project
               (bh/is-project-subtree-p)
               (member (org-get-todo-state) (list "NEXT")))
          subtree-end)
         (t
          nil)))))

  (defun bh/skip-projects-and-habits ()
    "Skip trees that are projects and tasks that are habits"
    (save-restriction
      (widen)
      (let ((subtree-end (save-excursion (org-end-of-subtree t))))
        (cond
         ((bh/is-project-p)
          subtree-end)
         ((org-is-habit-p)
          subtree-end)
         (t
          nil)))))

  (defun bh/skip-non-subprojects ()
    "Skip trees that are not projects"
    (let ((next-headline (save-excursion (outline-next-heading))))
      (if (bh/is-subproject-p)
          nil
        next-headline)))

  ;; disable default org-mode stuck project agenda view
  (setq org-stuck-projects (quote ("" nil nil "")))

#+end_src

Change parent tasks from "NEXT" to "TODO" because a project should not have a "NEXT" todo state.
#+begin_src emacs-lisp :results silent

  (defun bh/mark-next-parent-tasks-todo ()
    "Visit each parent task and change NEXT states to TODO"
    (let ((mystate (or (and (fboundp 'org-state)
                            state)
                       (nth 2 (org-heading-components)))))
      (when mystate
        (save-excursion
          (while (org-up-heading-safe)
            (when (member (nth 2 (org-heading-components)) (list "NEXT"))
              (org-todo "TODO")))))))

  (add-hook 'org-after-todo-state-change-hook 'bh/mark-next-parent-tasks-todo 'append)
  (add-hook 'org-clock-in-hook 'bh/mark-next-parent-tasks-todo 'append)
#+end_src

Press "P" to narrow to project in agenda
#+begin_src emacs-lisp :results silent
  (defun bh/widen ()
    (interactive)
    (if (equal major-mode 'org-agenda-mode)
        (progn
          (org-agenda-remove-restriction-lock)
          (when org-agenda-sticky
            (org-agenda-redo)))
      (widen)))

  (add-hook 'org-agenda-mode-hook
            '(lambda () (org-defkey org-agenda-mode-map "W" 'bh/widen))
            'append)

  (defun bh/narrow-to-org-subtree ()
    (widen)
    (org-narrow-to-subtree))

  (defun bh/narrow-to-subtree ()
    (interactive)
    (if (equal major-mode 'org-agenda-mode)
        (progn
          (org-with-point-at (org-get-at-bol 'org-hd-marker)
            (bh/narrow-to-org-subtree)
            (save-restriction
              (org-agenda-set-restriction-lock)))
          (when org-agenda-sticky
            (org-agenda-redo)))
      (bh/narrow-to-org-subtree)
      (save-restriction
        (org-agenda-set-restriction-lock))))

  (defun bh/narrow-up-one-org-level ()
    (widen)
    (save-excursion
      (outline-up-heading 1 'invisible-ok)
      (bh/narrow-to-org-subtree)))

  (defun bh/get-pom-from-agenda-restriction-or-point ()
    (or (org-get-at-bol 'org-hd-marker)
        (and (marker-position org-agenda-restrict-begin) org-agenda-restrict-begin)
        (and (equal major-mode 'org-mode) (point))
        org-clock-marker))

  (defun bh/narrow-up-one-level ()
    (interactive)
    (if (equal major-mode 'org-agenda-mode)
        (org-with-point-at (bh/get-pom-from-agenda-restriction-or-point)
          (bh/narrow-up-one-org-level))
      (bh/narrow-up-one-org-level)))

  (add-hook 'org-agenda-mode-hook
            '(lambda () (org-defkey org-agenda-mode-map "U" 'bh/narrow-up-one-level))
            'append)

  (defun bh/narrow-to-org-project ()
    (widen)
    (save-excursion
      (bh/find-project-task)
      (org-agenda-set-restriction-lock)
      (bh/narrow-to-org-subtree)))

  (defun bh/narrow-to-project ()
    (interactive)
    (if (equal major-mode 'org-agenda-mode)
        (progn
          (org-with-point-at (bh/get-pom-from-agenda-restriction-or-point)
            (bh/narrow-to-org-project)
            (save-excursion
              (bh/find-project-task)
              (org-agenda-set-restriction-lock)))
          (org-agenda-redo)
          (beginning-of-buffer))
      (bh/narrow-to-org-project)
      (save-restriction
        (org-agenda-set-restriction-lock))))

  (add-hook 'org-agenda-mode-hook
            '(lambda () (org-defkey org-agenda-mode-map "P" 'bh/narrow-to-project))
            'append)
#+end_src


** Todo state related configuration
todo keyword settings
#+begin_src emacs-lisp :results silent
  (setq org-todo-keywords
        '((sequence "TODO(t)" "MAYBE(m)" "NEXT(n)" "WAITING(w@/!)" "HOLD(h@/!)" "|" "DONE(d)" "CANCELLED(c@)" "DELEGATED(D@)" )))
#+end_src
todo state trigger
#+begin_src emacs-lisp :results silent
  (setq org-todo-state-tags-triggers
          '((done ("WAITING") ("HOLD"))
            ("TODO" ("WAITING") ("CANCELLED") ("HOLD"))
            ("MAYBE" ("WAITING") ("CANCELLED") ("HOLD"))
            ("WAITING" ("WAITING" . t))
            ("HOLD" ("WAITING" . t) ("HOLD" . t))
            ("CANCELLED" ("CANCELLED" . t) ("DELEGATED"))
            ("DELEGATED" ("DELEGATED" . t) ("CANCELLED"))
            ("DONE" ("WAITING") ("CANCELLED") ("HOLD") ("DELEGATED"))
            ))
#+end_src

** refile
I use ido for completing targets, so use long name/path in refiling.
#+begin_src emacs-lisp :results silent
  (setq org-refile-targets '((nil :maxlevel . 9)
                             (org-agenda-files :maxlevel . 9)))
  (setq org-refile-use-outline-path t)
  (setq org-outline-path-complete-in-steps nil)
  (setq org-refile-allow-creating-parent-nodes 'confirm)
#+end_src

exclude DONE tasks.
#+begin_src emacs-lisp :results silent
(defun bh/verify-refile-target ()
  "Exclude todo keywords with a done state from refile targets"
  (not (member (nth 2 (org-heading-components)) org-done-keywords)))

(setq org-refile-target-verify-function 'bh/verify-refile-target)
#+end_src



* Configurations for version control systems
** p4
#+begin_src emacs-lisp :results silent
  (when (shell-command "which p4")
    (require 'p4))
#+end_src


** git
#+begin_src emacs-lisp :results silent
(el-get 'sync "magit")
#+end_src
*** run magit-status in fullscreen and restore window configuration afterwards. This is copied from "what the emacs.d!?" site.
#+begin_src emacs-lisp :results silent
(require 'magit)
(defadvice magit-status (around magit-fullscreen activate)
  (window-configuration-to-register :magit-fullscreen)
  ad-do-it
  (delete-other-windows))

(defun magit-quit-session ()
  "Restores the previous window configuration and kills the magit buffer"
  (interactive)
  (kill-buffer)
  (jump-to-register :magit-fullscreen))

(define-key magit-status-mode-map (kbd "q") 'magit-quit-session)
#+end_src


* Programming languages
** lisp
*** turn paredit and hl-sexp for lisp related modes
#+begin_src emacs-lisp :results silent
  (el-get 'sync (list "paredit" "hl-sexp"))

  (defun abaw/lisp-hook ()
    (eldoc-mode 1)
    (hl-sexp-mode 1)
    (paredit-mode 1))

  (mapc (lambda (mode-hook)
          (add-hook mode-hook 'abaw/lisp-hook))
        '(lisp-mode-hook emacs-lisp-mode-hook ielm-mode-hook))

  (add-hook 'minibuffer-setup-hook (lambda ()
                                     (when (eq this-command 'eval-expression)
                                         (paredit-mode 1))))
#+end_src

*** emacs lisp
#+begin_src emacs-lisp :results silent
  (el-get 'sync "auto-complete-emacs-lisp")
  (require 'auto-complete-emacs-lisp)
  (ac-emacs-lisp-init)
  (add-to-list 'ac-modes 'inferior-emacs-lisp-mode)
  (add-hook 'ielm-mode-hook 'ac-emacs-lisp-setup)
#+end_src

** haskell
#+begin_src emacs-lisp :results silent
(el-get 'sync "haskell-mode")
#+end_src


** python
#+begin_src emacs-lisp :results silent
  (el-get 'sync "python-mode")
  (require 'python-mode)
  (set-default 'py-shell-name "ipython")
  (setq py-no-completion-calls-dabbrev-expand-p nil)
#+end_src

* Projectile
#+begin_src emacs-lisp :tangle yes
  (el-get 'sync "projectile")
#+end_src

- define project root files
#+begin_src emacs-lisp :tangle yes
  (loop for root-file in (list "build.requires" ;; ESPP packages
                               "Vagrantfile"    ;; Some projects have Vagrantfile with them
                               )
        do (add-to-list 'projectile-project-root-files root-file))

#+end_src

- ignore some files/directories
#+begin_src emacs-lisp :tangle yes
  (loop for ignored-dir in (list "rpmbuild"
                                 )
        do (add-to-list 'projectile-globally-ignored-directories ignored-dir t))

#+end_src

- give me the dired buffer when switching projects
#+begin_src emacs-lisp :tangle yes
  (setq projectile-switch-project-action 'projectile-dired)
#+end_src

** Some helper functions
#+begin_src emacs-lisp :tangle yes
  (defun abaw/projectile-shell ()
    (interactive)
    (let ((project-name (abbreviate-file-name (projectile-project-root)))
          (default-directory (projectile-project-root)))
      (shell (format "*shell:%s*" project-name))))

  (define-key projectile-command-map (kbd "!") 'abaw/projectile-shell)
#+end_src

* Per-host customization
** additional configuration for this host
#+begin_src emacs-lisp :results silent
  (let ((per-host-config (abaw/join-path abaw/host-dir "config.org")))
    (when (file-exists-p per-host-config)
      (org-babel-load-file per-host-config)))
#+end_src

** emacs customization file
#+begin_src emacs-lisp :results silent
  (setq custom-file (expand-file-name "custom.el" abaw/host-dir))
  (when (file-exists-p custom-file)
    (load-file custom-file))
#+end_src
* Start emacs server
#+begin_src emacs-lisp :results silent
  (when (eq window-system 'w32)
    (defadvice server-ensure-safe-dir (around always-safe-dir-on-windows activate)
      "We don't check the directory for the emacs server on Windows."
      t))
  (server-start)
  (setenv "EDITOR" "emacsclient")
#+end_src
